/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.expansionfiles;

import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.zip.CRC32;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;

import ti.expansionfiles.ZipResourceFile.ZipEntryRO;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.PendingIntent;
import android.content.Intent;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.AsyncTask;
import android.os.Messenger;
import android.os.SystemClock;

import com.google.android.vending.expansion.downloader.Constants;
import com.google.android.vending.expansion.downloader.DownloadProgressInfo;
import com.google.android.vending.expansion.downloader.DownloaderClientMarshaller;
import com.google.android.vending.expansion.downloader.DownloaderServiceMarshaller;
import com.google.android.vending.expansion.downloader.Helpers;
import com.google.android.vending.expansion.downloader.IDownloaderClient;
import com.google.android.vending.expansion.downloader.IDownloaderService;
import com.google.android.vending.expansion.downloader.IStub;

@Kroll.module(name="Tiexpansionfiles", id="ti.expansionfiles")
public class TiexpansionfilesModule extends KrollModule implements IDownloaderClient 
{

	private static final String TAG = "TiexpansionfilesModule";
	private IDownloaderService mRemoteService;
    private IStub mDownloaderClientStub;
    private int mState;
    private boolean mCancelValidation;
    private boolean mInitDone = false;
    
    @Kroll.constant
    static final int STATE_IDLE = IDownloaderClient.STATE_IDLE;
    @Kroll.constant
    static final int STATE_FETCHING_URL = IDownloaderClient.STATE_FETCHING_URL;
    @Kroll.constant
    static final int STATE_CONNECTING = IDownloaderClient.STATE_CONNECTING;
    @Kroll.constant
    static final int STATE_DOWNLOADING = IDownloaderClient.STATE_DOWNLOADING;
    @Kroll.constant
    static final int STATE_COMPLETED = IDownloaderClient.STATE_COMPLETED;
    @Kroll.constant
    static final int STATE_PAUSED_NETWORK_UNAVAILABLE = IDownloaderClient.STATE_PAUSED_NETWORK_UNAVAILABLE;
    @Kroll.constant
    static final int STATE_PAUSED_BY_REQUEST = IDownloaderClient.STATE_PAUSED_BY_REQUEST;
    @Kroll.constant
    static final int STATE_PAUSED_WIFI_DISABLED_NEED_CELLULAR_PERMISSION = IDownloaderClient.STATE_PAUSED_WIFI_DISABLED_NEED_CELLULAR_PERMISSION;
    @Kroll.constant
    static final int STATE_PAUSED_NEED_CELLULAR_PERMISSION = IDownloaderClient.STATE_PAUSED_NEED_CELLULAR_PERMISSION;
    @Kroll.constant
    static final int STATE_PAUSED_WIFI_DISABLED = IDownloaderClient.STATE_PAUSED_WIFI_DISABLED;
    @Kroll.constant
    static final int STATE_PAUSED_NEED_WIFI = IDownloaderClient.STATE_PAUSED_NEED_WIFI;
    @Kroll.constant
    static final int STATE_PAUSED_ROAMING = IDownloaderClient.STATE_PAUSED_ROAMING;
    @Kroll.constant
    static final int STATE_PAUSED_NETWORK_SETUP_FAILURE = IDownloaderClient.STATE_PAUSED_NETWORK_SETUP_FAILURE;
    @Kroll.constant
    static final int STATE_PAUSED_SDCARD_UNAVAILABLE = IDownloaderClient.STATE_PAUSED_SDCARD_UNAVAILABLE;
    @Kroll.constant
    static final int STATE_FAILED_UNLICENSED = IDownloaderClient.STATE_FAILED_UNLICENSED;
    @Kroll.constant
    static final int STATE_FAILED_FETCHING_URL = IDownloaderClient.STATE_FAILED_FETCHING_URL;
    @Kroll.constant
    static final int STATE_FAILED_SDCARD_FULL = IDownloaderClient.STATE_FAILED_SDCARD_FULL;
    @Kroll.constant
    static final int STATE_FAILED_CANCELED = IDownloaderClient.STATE_FAILED_CANCELED;
    @Kroll.constant
    static final int STATE_FAILED = IDownloaderClient.STATE_FAILED;
    
    
    /**
     * Calculating a moving average for the validation speed so we don't get
     * jumpy calculations for time etc.
     */
    static private final float SMOOTHING_FACTOR = 0.005f;
    
	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public TiexpansionfilesModule()
	{
		super();
		xAPKS = new ArrayList<XAPKFile>();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(TAG, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}
	
	Activity getRootActivity() {
		TiApplication tiApp = TiApplication.getInstance();
		return tiApp.getRootOrCurrentActivity();
	}
	
	Activity getCurrentActivity() {
		TiApplication tiApp = TiApplication.getInstance();
		return tiApp.getCurrentActivity();
	}
	
	/**
     * This is a little helper class that demonstrates simple testing of an
     * Expansion APK file delivered by Market. You may not wish to hard-code
     * things such as file lengths into your executable... and you may wish to
     * turn this code off during application development.
     */
    private static class XAPKFile {
        public final boolean mIsMain;
        public final int mFileVersion;
        public final long mFileSize;

        XAPKFile(boolean isMain, int fileVersion, long fileSize) {
            mIsMain = isMain;
            mFileVersion = fileVersion;
            mFileSize = fileSize;
        }
    }

    /**
     * Here is where you place the data that the validator will use to determine
     * if the file was delivered correctly. This is encoded in the source code
     * so the application can easily determine whether the file has been
     * properly delivered without having to talk to the server. If the
     * application is using LVL for licensing, it may make sense to eliminate
     * these checks and to just rely on the server.
     */
    private ArrayList<XAPKFile> xAPKS = null; 
    	

    /**
     * Go through each of the APK Expansion files defined in the structure above
     * and determine if the files are present and match the required size. Free
     * applications should definitely consider doing this, as this allows the
     * application to be launched for the first time without having a network
     * connection present. Paid applications that use LVL should probably do at
     * least one LVL check that requires the network to be present, so this is
     * not as necessary.
     * 
     * @return true if they are present.
     */
    boolean expansionFilesDelivered(Activity activity) 
    {
    	Log.d(TAG, "expansionFilesDelivered? checking files:");
        for (XAPKFile xf : xAPKS) {
            String fileName = Helpers.getExpansionAPKFileName(activity, xf.mIsMain, xf.mFileVersion);
            Log.d(TAG, "\tfile: " +  fileName);
            if (!Helpers.doesFileExist(activity, fileName, xf.mFileSize, false))
                return false;
        }
        return true;
    }
    
    /**
     * Go through each of the Expansion APK files and open each as a zip file.
     * Calculate the CRC for each file and return false if any fail to match.
     * 
     * @return true if XAPKZipFile is successful
     */
    @SuppressLint("StaticFieldLeak")
    void validateXAPKZipFiles() {


        AsyncTask<Object, DownloadProgressInfo, Boolean> validationTask = new AsyncTask<Object, DownloadProgressInfo, Boolean>() {

            @Override
            protected void onPreExecute() {
            	Log.d(TAG, "validateAPKStarted");
            	fireEvent("validateAPKStarted", null);
                super.onPreExecute();
            }

            @Override
            protected Boolean doInBackground(Object... params) {
            	Activity thisActivity = getRootActivity();
                for (XAPKFile xf : xAPKS) {
                    String fileName = Helpers.getExpansionAPKFileName(thisActivity, xf.mIsMain, xf.mFileVersion);
                    if (!Helpers.doesFileExist(thisActivity, fileName, xf.mFileSize, false))
                        return false;
                    fileName = Helpers.generateSaveFileName(thisActivity, fileName);
                    ZipResourceFile zrf;
                    byte[] buf = new byte[1024 * 256];
                    try {
                        zrf = new ZipResourceFile(fileName);
                        ZipEntryRO[] entries = zrf.getAllEntries();
                        /**
                         * First calculate the total compressed length
                         */
                        long totalCompressedLength = 0;
                        for (ZipEntryRO entry : entries) {
                            totalCompressedLength += entry.mCompressedLength;
                        }
                        float averageVerifySpeed = 0;
                        long totalBytesRemaining = totalCompressedLength;
                        long timeRemaining;
                        /**
                         * Then calculate a CRC for every file in the Zip file,
                         * comparing it to what is stored in the Zip directory.
                         * Note that for compressed Zip files we must extract
                         * the contents to do this comparison.
                         */
                        for (ZipEntryRO entry : entries) {
                            if (-1 != entry.mCRC32) {
                                long length = entry.mUncompressedLength;
                                CRC32 crc = new CRC32();
                                DataInputStream dis = null;
                                try {
                                    dis = new DataInputStream(
                                            zrf.getInputStream(entry.mFileName));

                                    long startTime = SystemClock.uptimeMillis();
                                    while (length > 0) {
                                        int seek = (int) (length > buf.length ? buf.length
                                                : length);
                                        dis.readFully(buf, 0, seek);
                                        crc.update(buf, 0, seek);
                                        length -= seek;
                                        long currentTime = SystemClock.uptimeMillis();
                                        long timePassed = currentTime - startTime;
                                        if (timePassed > 0) {
                                            float currentSpeedSample = (float) seek
                                                    / (float) timePassed;
                                            if (0 != averageVerifySpeed) {
                                                averageVerifySpeed = SMOOTHING_FACTOR
                                                        * currentSpeedSample
                                                        + (1 - SMOOTHING_FACTOR)
                                                        * averageVerifySpeed;
                                            } else {
                                                averageVerifySpeed = currentSpeedSample;
                                            }
                                            totalBytesRemaining -= seek;
                                            timeRemaining = (long) (totalBytesRemaining / averageVerifySpeed);
                                            this.publishProgress(
                                                    new DownloadProgressInfo(
                                                            totalCompressedLength,
                                                            totalCompressedLength
                                                                    - totalBytesRemaining,
                                                            timeRemaining,
                                                            averageVerifySpeed)
                                                    );
                                        }
                                        startTime = currentTime;
                                        if (mCancelValidation)
                                            return true;
                                    }
                                    if (crc.getValue() != entry.mCRC32) {
                                        Log.e(Constants.TAG,
                                                "CRC does not match for entry: "
                                                        + entry.mFileName);
                                        Log.e(Constants.TAG,
                                                "In file: " + entry.getZipFileName());
                                        return false;
                                    }
                                } finally {
                                    if (null != dis) {
                                        dis.close();
                                    }
                                }
                            }
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                        return false;
                    }
                }
                return true;
            }


            @Override
            protected void onProgressUpdate(DownloadProgressInfo... values) {
            	Log.d(TAG, "validateAPKSProgress");
            	DownloadProgressInfo progressInfo = values[0];
            	KrollDict evtObj = new KrollDict();
            	evtObj.put("currentSpeed", progressInfo.mCurrentSpeed);
            	evtObj.put("overallProgress", progressInfo.mOverallProgress);
            	evtObj.put("overallTotal", progressInfo.mOverallTotal);
            	evtObj.put("timeRemaining", progressInfo.mTimeRemaining);
                fireEvent("validateAPKProgress", evtObj);
                super.onProgressUpdate(values);
            }

            @Override
            protected void onPostExecute(Boolean result) {
                fireEvent("validateAPKFinished", null);
                super.onPostExecute(result);
            }

        };
        validationTask.execute(new Object());
    }

    
    @Kroll.method
    void pauseDownload() {
    	mRemoteService.requestPauseDownload();
    }
    
    @Kroll.method
    void resumeDownload() {
    	mRemoteService.requestContinueDownload();
    }

    
    void startDownload() {
    	 mDownloaderClientStub = DownloaderClientMarshaller.CreateStub(this, TiExpansionFilesDownloaderService.class);
    	 mDownloaderClientStub.connect(activity.get());
    }
    
    
    XAPKFile fileDescr(HashMap<String, Object> descr, String type) {
    	if (descr != null) {
    		Integer version = (Integer)descr.get("version");
    		if (version == null) {
    			throw new IllegalArgumentException("expected version argument for " + type);
    		}
    		Integer size = (Integer)descr.get("size");
    		if (size == null) {
    			throw new IllegalArgumentException("expected size argument for " + type);
    		}
    		
            return new XAPKFile(
            		type.equals("mainFile"), // true signifies a main file
            		version, // the version of the APK that the file was uploaded against
            		size // the length of the file in bytes
            		);
    	}
		return null;
    }
    
    
    @Kroll.method 
    void downloadXAPKs(Object obj) {
    	HashMap<String, Object> dict = (HashMap<String, Object>)obj;
    	HashMap<String, Object> mainFile = (HashMap<String, Object>) dict.get("mainFile");
    	XAPKFile mainDescr = fileDescr(mainFile, "mainFile");
    	if (mainDescr != null) {
    		xAPKS.add(mainDescr);
    	}
    	HashMap<String, Object> patchFile = (HashMap<String, Object>)dict.get("patchFile");
    	XAPKFile patchDescr = fileDescr(patchFile, "patchFile");
    	if (patchDescr != null) {
    		xAPKS.add(patchDescr);
    	}
    	
    	Log.d(TAG, xAPKS.toString());
    	
    	initialize();
    }
    
    
    String getxAPKFilePath(String type, int version) {
    	Activity thisActivity = getRootActivity();
    	String fileName = Helpers.getExpansionAPKFileName(thisActivity, type.equals("mainFile"), version);
    	return Helpers.generateSaveFileName(thisActivity, fileName);
    }
    
    
    @Kroll.method
    String getFilePath(String type, int version) {
    	return getxAPKFilePath(type, version);
    }
    
    @Kroll.method
    KrollDict getDownloadedFilePaths() {
    	KrollDict d = new KrollDict();
    	for(XAPKFile f: xAPKS) {
    		String type = f.mIsMain ? "mainFile" : "patchFile";
    		String path = getxAPKFilePath(type, f.mFileVersion);
    		d.put(type, path);
    	}
    	return d;
    }
    
    /**
     * Called when the activity is first create; we wouldn't create a layout in
     * the case where we have the file and are moving to another activity
     * without downloading.
     */
    private void initialize() {
    	Activity rootActivity = getRootActivity();
    	Log.d(TAG, "initialize. RootActivity: " + rootActivity.getClass().getName());
    	
        /**
         * Both downloading and validation make use of the "download" UI
         */
    	
        startDownload();

        /**
         * Before we do anything, are the files we expect already here and
         * delivered (presumably by Market) For free titles, this is probably
         * worth doing. (so no Market request is necessary)
         */
        if (!expansionFilesDelivered(rootActivity)) {

            try {
                Intent intentToLaunchThisActivityFromNotification = new Intent(rootActivity, rootActivity.getClass());
                intentToLaunchThisActivityFromNotification.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP |Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
                intentToLaunchThisActivityFromNotification.setAction(Intent.ACTION_MAIN);
                intentToLaunchThisActivityFromNotification.addCategory(Intent.CATEGORY_LAUNCHER);

                // Build PendingIntent used to open this activity from
                // Notification
                PendingIntent pendingIntent = PendingIntent.getActivity(rootActivity, 0, intentToLaunchThisActivityFromNotification, PendingIntent.FLAG_IMMUTABLE | PendingIntent.FLAG_CANCEL_CURRENT);
                // Request to start the download
                int startResult = DownloaderClientMarshaller.startDownloadServiceIfRequired(rootActivity, pendingIntent, TiExpansionFilesDownloaderService.class);

                if (startResult != DownloaderClientMarshaller.NO_DOWNLOAD_REQUIRED) {
                    // The DownloaderService has started downloading the files,
                    // show progress
                    startDownload();
                    return;
                } // otherwise, download not needed so we fall through to
                  // starting the movie
            } catch (NameNotFoundException e) {
                Log.e(TAG, "Cannot find own package! MAYDAY!");
                e.printStackTrace();
            }

        } else {
            validateXAPKZipFiles();
        }
        mInitDone = true;
    }

    
   

    /**
     * Critical implementation detail. In onServiceConnected we create the
     * remote service and marshaler. This is how we pass the client information
     * back to the service so the client can be properly notified of changes. We
     * must do this every time we reconnect to the service.
     */
    @Override
    public void onServiceConnected(Messenger m) {
        mRemoteService = DownloaderServiceMarshaller.CreateProxy(m);
        mRemoteService.onClientUpdated(mDownloaderClientStub.getMessenger());
        Log.d(TAG, "onServiceConnected");
        fireEvent("downloaderServiceConnected", null);
    }

    /**
     * The download state should trigger changes in the UI --- it may be useful
     * to show the state as being indeterminate at times. This sample can be
     * considered a guideline.
     */
    @Override
    public void onDownloadStateChanged(int newState) {
    	if (mState != newState) {
            mState = newState;
            KrollDict evtObj = new KrollDict();
            evtObj.put("state", newState);
            Log.d(TAG, "downloaderStateChanged to " + newState);
            fireEvent("downloaderStateChanged", evtObj);
        }
    }

    /**
     * Sets the state of the various controls based on the progressinfo object
     * sent from the downloader service.
     */
    @Override
    public void onDownloadProgress(DownloadProgressInfo progressInfo) {
    	KrollDict evtObj = new KrollDict();
    	evtObj.put("currentSpeed", progressInfo.mCurrentSpeed);
    	evtObj.put("overallProgress", progressInfo.mOverallProgress);
    	evtObj.put("overallTotal", progressInfo.mOverallTotal);
    	evtObj.put("timeRemaining", progressInfo.mTimeRemaining);
    	Log.d(TAG, "onDownloadProgress: " + evtObj.toString());
        fireEvent("downloadProgress", evtObj);
    }
    
    
    private int[] getFileVersions() {
    	int[] versions = new int[2];
    	versions[0] = 0;
    	versions[1] = 0;
    	for(XAPKFile f: xAPKS) {
    		if (f.mIsMain) {
    			versions[0] = f.mFileVersion;
    		}
    		else {
    			versions[1] = f.mFileVersion;
    		}
    	}
    	return versions;
    }
    
    
	@Kroll.method
	public FileProxy getFileFromZip(String path) throws Exception
	{
		if (!mInitDone) {
			throw new Exception("you should first call downloadXAPKs()");
		}
		int[] versions = getFileVersions();
		return new FileProxy(getRootActivity(), path, versions[0], versions[1]);
	}
	
	@Kroll.method
	public FileProxy getFileFromMain(String path) throws Exception
	{
		if (!mInitDone) {
			throw new Exception("you should first call downloadXAPKs()");
		}
		int[] versions = getFileVersions();
		String mainExpFile = getxAPKFilePath("mainFile", versions[0]);
		return new FileProxy(getRootActivity(), path, mainExpFile);
	}
	
	@Kroll.method
	public FileProxy getFileFromPatch(String path) throws Exception
	{
		if (!mInitDone) {
			throw new Exception("you should first call downloadXAPKs()");
		}
		int[] versions = getFileVersions();
		String mainExpFile = getxAPKFilePath("patchFile", versions[1]);
		return new FileProxy(getRootActivity(), path, mainExpFile);
	}
	
	@Kroll.method
	public String[] listAllFilesMerged() throws Exception
	{
		if (!mInitDone) {
			throw new Exception("you should first call downloadXAPKs()");
		}
		int[] versions = getFileVersions();
		ZipResourceFile zf = APKExpansionSupport.getAPKExpansionZipFile(getRootActivity(), versions[0], versions[1]);
		ZipEntryRO[] entries = zf.getAllEntries();
		List<String> listing = new ArrayList<String>();
		if (entries != null) {
			int len = entries.length;
			for (int i = 0; i < len; i++) {
				listing.add(entries[i].mFileName);
			}
		}
		return listing != null ? listing.toArray(new String[0]) : null;
	}
	
	@Kroll.method
	public String[] listAllFilesInMain() throws Exception
	{
		if (!mInitDone) {
			throw new Exception("you should first call downloadXAPKs()");
		}
		int[] versions = getFileVersions();
		String mainExpFile = getxAPKFilePath("mainFile", versions[0]);
		ZipResourceFile zf = new ZipResourceFile(mainExpFile);
		ZipEntryRO[] entries = zf.getAllEntries();
		List<String> listing = new ArrayList<String>();
		if (entries != null) {
			int len = entries.length;
			for (int i = 0; i < len; i++) {
				listing.add(entries[i].mFileName);
			}
		}
		return listing != null ? listing.toArray(new String[0]) : null;
	}
	
	@Kroll.method
	public String[] listAllFilesInPatch() throws Exception
	{
		if (!mInitDone) {
			throw new Exception("you should first call downloadXAPKs()");
		}
		int[] versions = getFileVersions();
		String mainExpFile = getxAPKFilePath("patchFile", versions[1]);
		ZipResourceFile zf = new ZipResourceFile(mainExpFile);
		ZipEntryRO[] entries = zf.getAllEntries();
		List<String> listing = new ArrayList<String>();
		if (entries != null) {
			int len = entries.length;
			for (int i = 0; i < len; i++) {
				listing.add(entries[i].mFileName);
			}
		}
		return listing != null ? listing.toArray(new String[0]) : null;
	}
	
}


